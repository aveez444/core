import { useState, useEffect } from 'react';
import { Bot, Save, Loader2, AlertTriangle, Users, Plus, Edit, Trash2, Settings, Volume2, Mic } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { apiService } from '../services/apiService';
import { toast } from 'react-toastify';

const Agents = () => {
  const { getSubscription, getAgentLimit } = useAuth();
  const [loading, setLoading] = useState(false);
  const [currentAgentCount, setCurrentAgentCount] = useState(0);
  const [agents, setAgents] = useState([]);
  const [voices, setVoices] = useState([]);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedAgent, setSelectedAgent] = useState(null);
  const [formValues, setFormValues] = useState({
    name: '',
    prompt: '',
    description: '',
    language: 'en',
    voice_id: 'default'
  });
  const [status, setStatus] = useState('');

  const subscription = getSubscription();
  const agentLimit = getAgentLimit();
  const canCreateAgent = currentAgentCount < agentLimit;

  // Fetch current agents and voices on component mount
  useEffect(() => {
    fetchAgents();
    fetchVoices();
  }, []);

  const fetchAgents = async () => {
    try {
      const response = await apiService.getAgents();
      if (response.agents) {
        setAgents(response.agents || []);
        setCurrentAgentCount(response.agents?.length || 0);
      }
    } catch (error) {
      console.error('Error fetching agents:', error);
      toast.error('Failed to fetch current agents');
    }
  };

  const fetchVoices = async () => {
    try {
      const response = await apiService.getVoices();
      if (response.voices) {
        setVoices(response.voices);
      }
    } catch (error) {
      console.error('Error fetching voices:', error);
      // Don't show error toast for voices as they're optional
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Check agent limit before creating
    if (!canCreateAgent) {
      toast.error(`You've reached your agent limit (${agentLimit}). Upgrade your plan to create more agents.`);
      return;
    }

    setLoading(true);
    setStatus('Creating agent...');
    
    try {
      const agentData = {
        name: formValues.name,
        prompt: formValues.prompt,
        description: formValues.description,
        voice_id: formValues.voice_id,
        language: formValues.language,
        agent_type: 'premium'
      };
      
      const response = await apiService.createAgent(agentData);
      
      if (response.message || response.agent_id) {
        setStatus(`✅ Agent "${formValues.name}" created successfully!`);
        toast.success(`Agent "${formValues.name}" created successfully!`);
        
        // Reset form after successful creation
        resetForm();
        setShowCreateModal(false);
        
        // Refresh agents list
        fetchAgents();
      } else {
        throw new Error(response.error || 'Failed to create agent');
      }
    } catch (error) {
      console.error('❌ Error creating agent:', error);
      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || 'Failed to create agent';
      setStatus(`❌ ${errorMsg}`);
      toast.error(errorMsg);
    } finally {
      setLoading(false);
    }
  };

  const handleEditAgent = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      const agentData = {
        name: formValues.name,
        prompt: formValues.prompt,
        description: formValues.description,
        voice_id: formValues.voice_id,
        language: formValues.language
      };
      
      const response = await apiService.updateAgent(selectedAgent.agent_id, agentData);
      
      if (response.message || response.success) {
        toast.success('Agent updated successfully!');
        resetForm();
        setShowEditModal(false);
        setSelectedAgent(null);
        fetchAgents();
      } else {
        throw new Error(response.error || 'Failed to update agent');
      }
    } catch (error) {
      console.error('❌ Error updating agent:', error);
      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || 'Failed to update agent';
      toast.error(errorMsg);
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteAgent = async (agentId, agentName) => {
    if (!window.confirm(`Are you sure you want to delete agent "${agentName}"? This action cannot be undone.`)) {
      return;
    }

    try {
      const response = await apiService.deleteAgent(agentId);
      if (response.message) {
        toast.success('Agent deleted successfully!');
        fetchAgents();
      } else {
        throw new Error(response.error || 'Failed to delete agent');
      }
    } catch (error) {
      console.error('❌ Error deleting agent:', error);
      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || 'Failed to delete agent';
      toast.error(errorMsg);
    }
  };

  const openCreateModal = () => {
    if (!canCreateAgent) {
      toast.error(`You've reached your agent limit (${agentLimit}). Upgrade your plan to create more agents.`);
      return;
    }
    resetForm();
    setShowCreateModal(true);
  };

  const openEditModal = (agent) => {
    setSelectedAgent(agent);
    setFormValues({
      name: agent.name || '',
      prompt: agent.conversation_config?.agent?.prompt?.prompt || agent.system_prompt || '',
      description: agent.description || '',
      language: agent.language || 'en',
      voice_id: agent.voice_id || 'default'
    });
    setShowEditModal(true);
  };

  const resetForm = () => {
    setFormValues({
      name: '',
      prompt: '',
      description: '',
      language: 'en',
      voice_id: 'default'
    });
    setStatus('');
  };

  const closeModals = () => {
    setShowCreateModal(false);
    setShowEditModal(false);
    setSelectedAgent(null);
    resetForm();
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormValues({...formValues, [name]: value});
  };

  const getVoiceName = (voiceId) => {
    const voice = voices.find(v => v.voice_id === voiceId);
    return voice ? voice.name : 'Default Voice';
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-6 lg:p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-2 flex items-center gap-3 text-gray-800">
            <Bot className="w-8 h-8 text-indigo-600" /> 
            Agents
          </h1>
          <p className="text-gray-600">Manage your conversational AI agents</p>
        </div>

        {/* Subscription Info */}
        <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 mb-8 border border-blue-200 shadow-sm">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Users className="w-5 h-5 text-blue-600" />
              </div>
              <div>
                <p className="font-semibold text-gray-800">Agent Usage</p>
                <p className="text-sm text-gray-600">
                  {currentAgentCount} of {agentLimit} agents created
                </p>
              </div>
            </div>
            <div className="text-right">
              <p className="text-sm text-gray-600">Current Plan</p>
              <p className="font-semibold text-indigo-600 capitalize">
                {subscription?.plan_type || 'None'}
              </p>
            </div>
          </div>
          {!canCreateAgent && (
            <div className="flex items-center gap-2 mt-4 p-3 bg-orange-50 rounded-lg border border-orange-200">
              <AlertTriangle className="w-5 h-5 text-orange-600" />
              <span className="text-sm font-medium text-orange-800">
                You've reached your agent limit. Upgrade your plan to create more agents.
              </span>
            </div>
          )}
        </div>

        {/* Agent Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {/* Create New Agent Card */}
          <div 
            onClick={openCreateModal}
            className={`relative group bg-white border-2 border-dashed rounded-xl p-6 flex flex-col items-center justify-center h-64 transition-all duration-300 ${
              canCreateAgent 
                ? 'border-gray-300 hover:border-indigo-400 hover:bg-indigo-50 cursor-pointer transform hover:scale-105' 
                : 'border-gray-200 bg-gray-50 cursor-not-allowed opacity-60'
            }`}
          >
            <div className={`p-4 rounded-full mb-4 transition-colors duration-300 ${
              canCreateAgent 
                ? 'bg-indigo-100 group-hover:bg-indigo-200' 
                : 'bg-gray-200'
            }`}>
              <Plus className={`w-8 h-8 ${
                canCreateAgent ? 'text-indigo-600' : 'text-gray-400'
              }`} />
            </div>
            <h3 className="text-lg font-semibold text-gray-700 mb-2">Create New Agent</h3>
            <p className="text-sm text-gray-500 text-center">
              {canCreateAgent ? 'Click to create a new AI agent' : 'Agent limit reached'}
            </p>
          </div>

          {/* Existing Agent Cards */}
          {agents.map((agent) => (
            <div key={agent.agent_id} className="relative group bg-white rounded-xl shadow-sm border border-gray-200 p-6 h-64 transition-all duration-300 hover:shadow-lg hover:border-indigo-300 transform hover:scale-105">
              {/* Agent Actions */}
              <div className="absolute top-3 right-3 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                <div className="flex gap-1">
                  <button 
                    onClick={() => openEditModal(agent)}
                    className="p-1.5 bg-blue-100 text-blue-600 rounded-md hover:bg-blue-200 transition-colors"
                    title="Edit Agent"
                  >
                    <Edit className="w-4 h-4" />
                  </button>
                  <button 
                    onClick={() => handleDeleteAgent(agent.agent_id, agent.name)}
                    className="p-1.5 bg-red-100 text-red-600 rounded-md hover:bg-red-200 transition-colors"
                    title="Delete Agent"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              </div>

              {/* Agent Icon */}
              <div className="flex items-center justify-center w-16 h-16 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl mb-4 mx-auto">
                <Bot className="w-8 h-8 text-white" />
              </div>

              {/* Agent Details */}
              <div className="text-center">
                <h3 className="text-lg font-semibold text-gray-800 mb-2 truncate" title={agent.name}>
                  {agent.name}
                </h3>
                
                {agent.description && (
                  <p className="text-sm text-gray-600 mb-3 line-clamp-2" title={agent.description}>
                    {agent.description}
                  </p>
                )}

                {/* Agent Metadata */}
                <div className="space-y-1 text-xs text-gray-500">
                  <div className="flex items-center justify-center gap-1">
                    <Volume2 className="w-3 h-3" />
                    <span>{getVoiceName(agent.voice_id || 'default')}</span>
                  </div>
                  
                  <div className="flex items-center justify-center gap-1">
                    <div className={`w-2 h-2 rounded-full ${
                      agent.status === 'active' ? 'bg-green-500' : 'bg-gray-400'
                    }`}></div>
                    <span className="capitalize">{agent.status || 'Active'}</span>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Empty State */}
        {agents.length === 0 && (
          <div className="text-center py-12">
            <Bot className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-gray-700 mb-2">No agents created yet</h3>
            <p className="text-gray-500 mb-6">Create your first AI agent to get started</p>
          </div>
        )}

        {/* Create Agent Modal */}
        {showCreateModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <h2 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
                    <Bot className="w-6 h-6 text-indigo-600" />
                    Create New Agent
                  </h2>
                  <button 
                    onClick={closeModals}
                    className="text-gray-400 hover:text-gray-600 transition-colors"
                  >
                    ✕
                  </button>
                </div>
              </div>
              
              <form onSubmit={handleSubmit} className="p-6 space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Agent Name *</label>
                    <input
                      type="text"
                      name="name"
                      value={formValues.name}
                      onChange={handleInputChange}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                      placeholder="Enter agent name"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Language *</label>
                    <select
                      name="language"
                      value={formValues.language}
                      onChange={handleInputChange}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    >
                      <option value="en">English</option>
                      <option value="hi">Hindi</option>
                      <option value="es">Spanish</option>
                      <option value="fr">French</option>
                      <option value="de">German</option>
                      <option value="it">Italian</option>
                      <option value="pt">Portuguese</option>
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Voice</label>
                  <select
                    name="voice_id"
                    value={formValues.voice_id}
                    onChange={handleInputChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  >
                    <option value="default">Default Voice</option>
                    {voices.map((voice) => (
                      <option key={voice.voice_id} value={voice.voice_id}>
                        {voice.name} {voice.category && `(${voice.category})`}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                  <input
                    type="text"
                    name="description"
                    value={formValues.description}
                    onChange={handleInputChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    placeholder="Brief description of the agent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">System Prompt *</label>
                  <textarea
                    name="prompt"
                    value={formValues.prompt}
                    onChange={handleInputChange}
                    rows={6}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    placeholder="Enter the system prompt that defines your agent's behavior..."
                    required
                  />
                </div>

                <div className="flex gap-3 pt-4">
                  <button
                    type="button"
                    onClick={closeModals}
                    className="flex-1 px-4 py-3 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={loading}
                    className="flex-1 flex items-center justify-center gap-2 px-4 py-3 bg-gradient-to-r from-indigo-500 to-purple-600 text-white rounded-lg hover:from-indigo-600 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
                  >
                    {loading ? (
                      <>
                        <Loader2 className="w-5 h-5 animate-spin" />
                        Creating...
                      </>
                    ) : (
                      <>
                        <Save className="w-5 h-5" />
                        Create Agent
                      </>
                    )}
                  </button>
                </div>
              </form>

              {status && (
                <div className={`mx-6 mb-6 p-4 rounded-lg ${
                  status.includes('✅') ? 'bg-green-50 text-green-800 border border-green-200' :
                  'bg-red-50 text-red-800 border border-red-200'
                }`}>
                  <p className="font-medium">{status}</p>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Edit Agent Modal */}
        {showEditModal && selectedAgent && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <h2 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
                    <Settings className="w-6 h-6 text-indigo-600" />
                    Edit Agent
                  </h2>
                  <button 
                    onClick={closeModals}
                    className="text-gray-400 hover:text-gray-600 transition-colors"
                  >
                    ✕
                  </button>
                </div>
              </div>
              
              <form onSubmit={handleEditAgent} className="p-6 space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Agent Name *</label>
                    <input
                      type="text"
                      name="name"
                      value={formValues.name}
                      onChange={handleInputChange}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                      placeholder="Enter agent name"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Language *</label>
                    <select
                      name="language"
                      value={formValues.language}
                      onChange={handleInputChange}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    >
                      <option value="en">English</option>
                      <option value="hi">Hindi</option>
                      <option value="es">Spanish</option>
                      <option value="fr">French</option>
                      <option value="de">German</option>
                      <option value="it">Italian</option>
                      <option value="pt">Portuguese</option>
                    </select>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Voice</label>
                  <select
                    name="voice_id"
                    value={formValues.voice_id}
                    onChange={handleInputChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  >
                    <option value="default">Default Voice</option>
                    {voices.map((voice) => (
                      <option key={voice.voice_id} value={voice.voice_id}>
                        {voice.name} {voice.category && `(${voice.category})`}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                  <input
                    type="text"
                    name="description"
                    value={formValues.description}
                    onChange={handleInputChange}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    placeholder="Brief description of the agent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">System Prompt *</label>
                  <textarea
                    name="prompt"
                    value={formValues.prompt}
                    onChange={handleInputChange}
                    rows={6}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    placeholder="Enter the system prompt that defines your agent's behavior..."
                    required
                  />
                </div>

                <div className="flex gap-3 pt-4">
                  <button
                    type="button"
                    onClick={closeModals}
                    className="flex-1 px-4 py-3 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={loading}
                    className="flex-1 flex items-center justify-center gap-2 px-4 py-3 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-lg hover:from-blue-600 hover:to-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
                  >
                    {loading ? (
                      <>
                        <Loader2 className="w-5 h-5 animate-spin" />
                        Updating...
                      </>
                    ) : (
                      <>
                        <Save className="w-5 h-5" />
                        Update Agent
                      </>
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Agents;

